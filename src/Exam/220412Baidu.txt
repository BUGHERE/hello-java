import java.util.*;

// 注意类名必须为 Main, 不要有任何 package xxx 信息
public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        // 注意 hasNext 和 hasNextLine 的区别
        while (in.hasNextInt()) { // 注意 while 处理多个 case
            int t = in.nextInt();
            for (int round = 0; round < t; ++round) {
                int n = in.nextInt();
                int k = in.nextInt();
                int[] arr = new int[n];
                for (int i = 0; i < n; ++i) {
                    arr[i] = in.nextInt();
                }
                int[] xCount = new int[n];  // 奇数
                int[] yCount = new int[n];  // 偶数
                if (arr[0] % 2 == 0) {
                    xCount[0] = 1;
                }
                else {
                    yCount[0] = 1;
                }
                for (int i = 1; i < n; ++i) {
                    if (arr[i] % 2 == 0) {
                        xCount[i] = xCount[i-1]+1;
                        yCount[i] = yCount[i-1];
                    }
                    else {
                        xCount[i] = xCount[i-1];
                        yCount[i] = yCount[i-1]+1;
                    }
                }
                int[] xResult = new int[n];
                int[] yResult = new int[n];
                if (yCount[k-1]%2 == 0) {
                    xResult[k-1] = 1;
                }
                else {
                    yResult[k-1] = 1;
                }
                for (int i = k; i < n; ++i) {
                    xResult[i] = xResult[i-1] + xCount[i-1];
                    yResult[i] = yResult[i-1] + yCount[i-1];
                }
                System.out.println(xResult[n-1]);
            }
        }
    }
}
import java.awt.print.PrinterGraphics;
import java.util.*;

// 注意类名必须为 Main, 不要有任何 package xxx 信息
public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        // 注意 hasNext 和 hasNextLine 的区别
        while (in.hasNextInt()) { // 注意 while 处理多个 case
            int n = in.nextInt();
            int[] a = new int[n];
            int[] b = new int[n];
            boolean[] delete = new boolean[n];
            for (int i = 0; i < n; ++i) {
                a[i] = in.nextInt();
                b[i] = in.nextInt();
            }
            long[] temp = new long[n];
            for (int i = 0; i < n; ++i) {
                temp[i] = a[i];
            }
            int deleteCount = 0;
            for (int i = 1; i < n; ++i) {
                for (int j = 0; j < n; ++j) {
                    temp[j] += b[j];
                }
                if (i % 3 == 2) {
                    int index = getMaxIndexLong(temp, delete);
                    delete[index] = true;  // 嵌套
                    ++deleteCount;
                }
            }
            long result = 0;
            for (int i = 0; i < n; ++i) {
                result += delete[i] ? 0 : a[i];  // 原价
            }
            int day = 0;
            while (deleteCount < n) {
                int index = getMaxIndex(b, delete);
                delete[index] = true;
                ++deleteCount;
                result += day * b[index];
                ++day;
            }
            System.out.println(result);
        }
    }
    public static int getMaxIndex(int[] arr, boolean delete[]) {
        int index = 0;
        int max = Integer.MIN_VALUE;
        for (int i = 0 ; i < arr.length; ++i) {
            if (!delete[i] && arr[i] > max) {
                index = i;
                max = arr[i];
            }
        }
        return index;
    }
    public static int getMaxIndexLong(long[] arr, boolean delete[]) {
        int index = 0;
        long max = Long.MIN_VALUE;
        for (int i = 0 ; i < arr.length; ++i) {
            if (!delete[i] && arr[i] > max) {
                index = i;
                max = arr[i];
            }
        }
        return index;
    }
}
