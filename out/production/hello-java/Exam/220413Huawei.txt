import java.util.*;
class Server {
    int num;
    int cpuCount;
    int memSize;
    int cpuArch;
    int supportNP;
    public Server(int num, int cpuCount, int memSize, int cpuArch, int supportNP) {
        this.num = num;
        this.cpuCount = cpuCount;
        this.memSize = memSize;
        this.cpuArch = cpuArch;
        this.supportNP = supportNP;
    }
}
public class Main {
    public static void main(String[] args) throws InterruptedException {
        Scanner in = new Scanner(System.in);
        while (in.hasNext()) {
            int serverNum = in.nextInt();
            Server[] servers = new Server[serverNum];
            for (int i = 0; i < serverNum; ++i) {
                String nextLine = in.next();
                String[] params = nextLine.split(",");
                servers[i] = new Server(Integer.valueOf(params[0]), Integer.valueOf(params[1]),
                        Integer.valueOf(params[2]), Integer.valueOf(params[3]), Integer.valueOf(params[4]));
            }
            String nextLine = in.nextLine();
            nextLine = in.nextLine();
            String[] params = nextLine.split(" ");
            int n = Integer.valueOf(params[0]);
            int strategy = Integer.valueOf(params[1]);
            int cpuCount = Integer.valueOf(params[2]);
            int memSize = Integer.valueOf(params[3]);
            int cpuArch = Integer.valueOf(params[4]);
            int supportNp = Integer.valueOf(params[5]);
            boolean[] selected = new boolean[serverNum];
            List<Integer> result = new ArrayList<>();
            for (int i = 0; i < n; ++i) {

                int index = -1;
                if (strategy == 1) index = getMaxS1(cpuCount, memSize, cpuArch, supportNp, servers, selected);
                else if (strategy == 2) index = getMaxS2(cpuCount, memSize, cpuArch, supportNp, servers, selected);
                if (index != -1) {
                    result.add(index);
                }
                else {
                    break;
                }
            }
            int[] resultArr = new int[result.size()];
            for (int i = 0; i < resultArr.length; ++i) {
                resultArr[i] = result.get(resultArr.length-1-i);
            }
            Arrays.sort(resultArr);
            if (resultArr.length == 0)
                System.out.print(resultArr.length);
            else
                System.out.print(resultArr.length+" ");
            for (int i = 0; i < resultArr.length-1; ++i) {
                System.out.print(resultArr[i]+" ");
            }
            if (resultArr.length > 0)
                System.out.print(resultArr[resultArr.length-1]);
        }
    }
    public static int getMaxS1(int cpuCount, int memSize, int cpuArch, int supportNp, Server[] servers, boolean[] selected) {
        int index = -1;
        int maxCpu = Integer.MAX_VALUE;
        int maxMem = Integer.MAX_VALUE;
        for (int i = 0; i < servers.length; ++i) {
            if (selected[i]) {
                continue;
            }
            if ((cpuArch == 9 || (cpuArch == servers[i].cpuArch)) && (supportNp == 2 || (supportNp == servers[i].supportNP))) {
                int curCpu = servers[i].cpuCount;
                int curMem = servers[i].memSize;
                if (curCpu >= cpuCount && curMem >= memSize) {
                    if ((curCpu - cpuCount) < maxCpu) {
                        index = i;
                        maxCpu = curCpu - cpuCount;
                        maxMem = curMem - memSize;
                    } else if ((curCpu - cpuCount) == maxCpu) {
                        if ((curMem - memSize) < maxMem) {
                            index = i;
                            maxCpu = curCpu - cpuCount;
                            maxMem = curMem - memSize;
                        }
                    }
                }
            }
        }
        if (index != -1) {
            selected[index] = true;
        }
        return index;
    }
        public static int getMaxS2(int cpuCount, int memSize, int cpuArch, int supportNp, Server[] servers, boolean[] selected) {
        int index = -1;
        int maxCpu = Integer.MAX_VALUE;
        int maxMem = Integer.MAX_VALUE;
        for (int i = 0; i < servers.length; ++i) {
            if (selected[i]) {
                continue;
            }
            if ((cpuArch == 9 || (cpuArch == servers[i].cpuArch)) && (supportNp == 2 || (supportNp == servers[i].supportNP))) {
                int curCpu = servers[i].cpuCount;
                int curMem = servers[i].memSize;
                if (curCpu >= cpuCount && curMem >= memSize) {
                    if ((curMem - memSize) < maxMem) {
                        index = i;
                        maxCpu = curCpu - cpuCount;
                        maxMem = curMem - memSize;
                    } else if ((curMem - memSize) == maxMem) {
                        if ((curCpu - cpuCount) < maxCpu) {
                            index = i;
                            maxCpu = curCpu - cpuCount;
                            maxMem = curMem - memSize;
                        }
                    }
                }
            }
        }
        if (index != -1) {
            selected[index] = true;
        }
        return index;
    }
}
import java.util.*;
public class Main {
    public static void main(String[] args) throws InterruptedException {
        Scanner in = new Scanner(System.in);
        while (in.hasNextInt()) {
            int n = in.nextInt();
            int[] arr = new int[n];
            for (int i = 0; i < n; ++i) {
                arr[i] = in.nextInt();
            }
            Arrays.sort(arr);
            int[] preSum = new int[n];
            preSum[0] = arr[0];
            for (int i = 1; i < n; ++i) {
                preSum[i] = arr[i] + preSum[i-1];
            }
            int sum = preSum[n-1];
            if (sum % 2 == 1) {
                System.out.print(-1);
                return;
            }
            int avg = sum / 2;
            int index = -1;
            for (int i = 0; i < n; ++i) {
                if (preSum[i] == avg) {
                    index = i;
                    System.out.println(avg);
                    for (int k = 0; k <= i; ++k) {
                        if (k != 0) {
                            System.out.print(" " + arr[k]);
                        }
                        else {
                            System.out.print(arr[k]);
                        }
                    }
                    System.out.println();
                    for (int k = i+1; k < n; ++k) {
                        if (k != i+1) {
                            System.out.print(" " + arr[k]);
                        }
                        else {
                            System.out.print(arr[k]);
                        }
                    }
                    break;
                }
                if (preSum[i] < avg) {
                    for (int j = i+1; j < n; ++j) {
                        if (preSum[i] + arr[j] == avg) {
                            index = i;
                            System.out.println(avg);
                            for (int k = 0; k <= i; ++k) {

                                    System.out.print(arr[k] + " ");

                            }
                            System.out.print(arr[j]);  //
                            System.out.println();
                            for (int k = i + 1; k < n; ++k) {
                                if (k != j) {
                                    if (k != n-1) {
                                        System.out.print(arr[k] + " ");
                                    }
                                    else {
                                        System.out.print(arr[k]);
                                    }
                                }
                            }
                            return;
                        }
                    }
                }
                else {
                    for (int j = 0; j < i; ++j) {
                        if (preSum[i] - arr[j] == avg) {
                            index = i;
                            System.out.println(avg);
                            for (int k = 0; k <= i; ++k) {
                                if (k != j) {
                                    if (k != 0) {
                                        System.out.print(" " + arr[k]);
                                    }
                                    else {
                                        System.out.print(arr[k]);
                                    }
                                }
                            }
                            System.out.println();
                            System.out.print(arr[j]);
                            for (int k = i + 1; k < n; ++k) {
                                if (k != i+1) {
                                    System.out.print(" " + arr[k]);
                                }
                                else {
                                    System.out.print(arr[k]);
                                }
                            }
                            return;
                        }
                    }
                }
            }
            if (index == -1) {
                System.out.println(-1);
            }
        }
    }
}
试后：
第三题：
import java.util.*;
class Server {
    int num;
    int cpuCount;
    int memSize;
    int cpuArch;
    int supportNP;
    public Server(int num, int cpuCount, int memSize, int cpuArch, int supportNP) {
        this.num = num;
        this.cpuCount = cpuCount;
        this.memSize = memSize;
        this.cpuArch = cpuArch;
        this.supportNP = supportNP;
    }
}
public class Main {
    public static void main(String[] args) throws InterruptedException {
        Scanner in = new Scanner(System.in);
        while (in.hasNextInt()) {
            int n = in.nextInt();
            int[] arr = new int[n];
            int sum = 0;
            for (int i = 0; i < n; ++i) {
                arr[i] = in.nextInt();
                sum += arr[i];
            }
            if (sum % 2 == 1 || n == 1) {
                System.out.println(-1);
                continue;
            }
            int target = sum / 2;
            // dp[i][j]: 能否用前i个数组元素中找到子数组和为j
            boolean[][] dp = new boolean[n][target+1];
            // dp[i][0]: 对于所有i，肯定可以找到子数组（空数组），和为0
            for (int i = 0; i < n; ++i) {
                dp[i][0] = true;
            }
            for (int j = 1; j < target+1; ++j) {
                dp[0][j] = arr[0] == j ? true : false;
            }
            // dp[i][j]: 可以分为两种情况：是否利用当前这个i数组元素：（1）不用：dp[i][j] = dp[i-1][j] (2)用：dp[i][j] = dp[i-1][j-arr[i]]
            // 对于用的情况有条件限制，j-arr[i]如果为负值，则说明当前这个i数组元素比target大，那么这种情况肯定不行
            for (int i = 1; i < n; ++i) {
                for (int j = 1; j < target+1; ++j) {
                    if (j-arr[i] < 0) {
                        dp[i][j] = dp[i-1][j];
                    }
                    else {
                        dp[i][j] = dp[i-1][j] | dp[i-1][j-arr[i]];
                    }
                }
            }
            if (dp[n-1][target]) {
                System.out.println(target);
                // 现在把和为target的子数组元素找出来，因为之后还要把另一部分的元素找出来，所以这里用result1标志
                boolean[] result1 = new boolean[n];
                // 依次去除数组
                while (target > 0) {
                    for (int i = 0; i < n; ++i) {
                        if (dp[i][target] && !result1[i]) {
                            result1[i] = true;
                            target -= arr[i];
                            break;
                        }
                    }
                }
                int count = 0;
                for (int i = 0; i < n; ++i) {
                    if (result1[i]) {
                        if (count == 0) {
                            System.out.print(arr[i]);
                        }
                        else {
                            System.out.print(" " + arr[i]);
                        }
                        ++count;
                    }
                }
                System.out.println();
                count = 0;
                for (int i = 0; i < n; ++i) {
                    if (!result1[i]) {
                        if (count == 0) {
                            System.out.print(arr[i]);
                        }
                        else {
                            System.out.print(" " + arr[i]);
                        }
                        ++count;
                    }
                }
                System.out.println();
            }
            else {
                System.out.println(-1);
            }
        }
    }
}
