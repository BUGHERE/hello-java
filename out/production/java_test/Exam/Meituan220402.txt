import java.util.*;

// 美团后端笔试4.2第2题
public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        while (in.hasNextInt()) {
            int n = in.nextInt();
            int[] arr = new int[n];
            for (int i = 0; i < n; ++i) {
                arr[i] = in.nextInt();
            }
            int[] left = new int[n];  // 存储从左到右递增的数组每个元素需要增加的值
            left[0] = 0;
            for (int i = 1; i < n; ++i) {
                left[i] = arr[i] > left[i-1]+arr[i-1] ? 0 : left[i-1]+arr[i-1]+1-arr[i];
            }
            int[] right = new int[n];  // 存储从右到左递增的数组每个元素需要增加的值
            right[n-1] = 0;
            for (int i = n-2; i >= 0; --i) {
                right[i] = arr[i] > right[i+1]+arr[i+1] ? 0 : right[i+1]+arr[i+1]+1-arr[i];
            }
            // 计算left和right的数组每个元素的大值，方便后续计算
            int[] arrMax = new int[n];
            for (int i = 0; i < n; ++i) {
                arrMax[i] = left[i] > right[i] ? left[i] : right[i];
            }
            // 累加左边的值，方便后续计算
            for (int i = 1; i < n; ++i) {
                left[i] += left[i-1];
            }
            // 累加右边的值，方便后续计算
            for (int i = n-2; i >= 0; --i) {
                right[i] += right[i+1];
            }
            int result = Integer.MAX_VALUE;
            int cur = 0;
            for (int i = 0; i < n; ++i) {
                if (i == 0) {
                    cur = arrMax[i] + right[i+1];
                }
                else if (i == n-1) {
                    cur = arrMax[i] + left[i-1];
                }
                else {
                    cur = arrMax[i] + left[i-1] + right[i+1];
                }
                result = Math.min(result, cur);
            }
            System.out.println(result);
        }
    }
}
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        while (in.hasNext()) {
            String str = in.next();
            String core = in.next();
            int strLen = str.length();
            int coreLen = core.length();
            int index = str.indexOf(core);
            int result = 0;
            int coreNum = 0;
            while (index != -1) {
                ++coreNum;
                int leftLen = index;
                int rightLen = strLen - index - coreLen;
                result += (leftLen+1) * (rightLen+1);
                index = str.indexOf(core, index + 1);
            }
            for (int i = 2; i <= coreNum; ++i) {
                result -= (i-1)*(coreNum-(i-1));
            }
            System.out.println(result);
        }
    }
}
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        while (in.hasNextInt()) {
            int n = in.nextInt();
            int[] arr = new int[n];
            for (int i = 0; i < n; ++i) {
                arr[i] = in.nextInt();
            }
            int result = 0;
            int sum = 0;
            Arrays.sort(arr);
            for (int i = 0; i < n; ++i) {
                sum += arr[i];
            }
            result = sum / 3;
            for (int i = 0; i < n; ++i) {
                if (arr[n - 1 - i] > result)
                    result = arr[n-1];
                else
                    break;
            }
            System.out.println(result);
        }
    }
}
public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        while (in.hasNextInt()) {
            int n = in.nextInt();
            int[] arr = new int[n*n];
            for (int i = 0; i < n; ++i) {
                for (int j = 0; j < n; ++j) {
                    arr[i*n + j] = in.nextInt();
                }
            }
            int result = 0;
            if (n%2 == 0) {
                for (int i = 0; i < n/2; ++i) {
                    for (int j = 0; j < n/2; ++j) {
                        if (i == n/2) {
                            result += Math.abs(arr[i*n+j]-arr[i*n+n-1-j]);
                        }
                        else if (j == n/2) {
                            result += Math.abs(arr[i*n+j]-arr[(n-1-i)*n+j]);
                        }
                        else {
                            result += swap(arr[i * n + j], arr[i * n + n - 1 - j], arr[(n - 1 - i) * n + j], arr[(n - 1 - i) * n + n - 1 - j]);
                        }
                    }
                }
            }
            else {
                for (int i = 0; i <= n/2; ++i) {
                    for (int j = 0; j <= n/2; ++j) {
                        if (i == n/2) {
                            result += Math.abs(arr[i*n+j]-arr[i*n+n-1-j]);
                        }
                        else if (j == n/2) {
                            result += Math.abs(arr[i*n+j]-arr[(n-1-i)*n+j]);
                        }
                        else {
                            result += swap(arr[i * n + j], arr[i * n + n - 1 - j], arr[(n - 1 - i) * n + j], arr[(n - 1 - i) * n + n - 1 - j]);
                        }
                    }
                }
            }

            System.out.println(result);
        }
    }
    private static int swap(int a1, int a2, int a3, int a4) {
        int[] arr = {a1, a2, a3, a4};
        Arrays.sort(arr);
        int cost = 0;
        for (int i = 0; i < 4; ++i) {
            cost += Math.abs(arr[i] - arr[1]);
        }
        return cost;
    }
}